apply plugin: 'com.android.library'
apply plugin: 'maven'

ext {
    PUBLISH_GROUP_ID = 'it.necst.grabnrun'
    PUBLISH_ARTIFACT_ID = 'grabnrun'
    PUBLISH_VERSION = '1.0.2'
}

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 21
        versionCode 3
        versionName "1.0.2"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }
    }

    sourceSets {

        androidTest {
            java.srcDirs = ['test/java']
        }
    }

    // Used to avoid unit tests to fail when encountering a static
    // Android method not mocked.
    // See: http://g.co/androidstudio/not-mocked
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile group: 'com.google.guava', name: 'guava', version: '18.0'

    // Unit testing dependencies
    testCompile 'junit:junit:4.12'
    // Set this dependency if you want to use Mockito
    testCompile 'org.mockito:mockito-core:1.10.19'
    // Set this dependency if you want to use Hamcrest matching
    testCompile 'org.hamcrest:hamcrest-library:1.1'
}

def groupId = project.PUBLISH_GROUP_ID
def artifactId = project.PUBLISH_ARTIFACT_ID
def version = project.PUBLISH_VERSION

def localReleaseDest = "${buildDir}/release/${version}"

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

uploadArchives {
    repositories.mavenDeployer {
        pom.groupId = groupId
        pom.artifactId = artifactId
        pom.version = version
        pom.project {

            name "Grab'n Run Library"
            packaging 'aar'
            description 'A simple and effective Java Library for Android projects to secure dynamic code loading.'
            url 'https://github.com/lukeFalsina/Grab-n-Run'

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    name 'Luca Falsina'
                    email 'lfalsina@gmail.com'
                }
            }
        }

        repository(url: "file://${localReleaseDest}")
    }
}

task zipRelease(type: Zip) {
    from localReleaseDest
    destinationDir buildDir
    archiveName "release-${version}.zip"
}

task generateRelease << {
    println "Release ${version} can be found at ${localReleaseDest}/"
    println "Release ${version} zipped can be found ${buildDir}/release-${version}.zip"
}

generateRelease.dependsOn(uploadArchives)
generateRelease.dependsOn(zipRelease)

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}